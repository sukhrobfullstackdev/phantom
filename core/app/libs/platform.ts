import { includes } from '~/app/libs/lodash-utils';
import { getOptionsFromEndpoint } from './query-params';
import { Endpoint } from '~/server/routes/endpoint';

export function isMobileSDK() {
  const options = getOptionsFromEndpoint(Endpoint.Client.SendLegacy);
  const { sdk } = options;

  // TODO(smithki#ch9309|2020-07-27): As of now, MGBOX does not forward the same
  // encoded query parameters as generated by the mobile client SDK. As a
  // workaround, we will test the encoded `DOMAIN_ORIGIN` parameter against
  // `box.{ENV}.magic.link`. This is not a permanent solution due to #ch20924.
  const isMobileBoxRelayer = /(box\.(dev\.|stagef\.|)magic\.link)/.test(options.DOMAIN_ORIGIN!);

  // Adding sdk property check as DOMAIN_ORIGIN does not always return truthy result.
  // Check #ch42865
  const isSDKMobile =
    includes(sdk, 'ios') ||
    includes(sdk, 'android') ||
    includes(sdk, 'flutter') ||
    includes(sdk, 'rn') ||
    includes(sdk, 'react-native') ||
    includes(sdk, 'unity');

  return isSDKMobile || isMobileBoxRelayer;
}

export function isIosSDK() {
  const options = getOptionsFromEndpoint(Endpoint.Client.SendLegacy);
  const { sdk } = options;
  return includes(sdk, 'ios');
}

export function isRnSDK() {
  const options = getOptionsFromEndpoint(Endpoint.Client.SendLegacy);
  const { sdk } = options;
  return includes(sdk, 'rn');
}

export function isRnOrIosSDK() {
  return isRnSDK() || isIosSDK();
}

export function isAndroidDevice() {
  return navigator && navigator.userAgent.toLocaleLowerCase().includes('android');
}

export function isIosDevice() {
  return navigator && /(iPad|iPhone|iPod)/g.test(navigator.userAgent);
}

export function isAndroid() {
  return isMobileSDK() && navigator && navigator.userAgent.toLocaleLowerCase().includes('android');
}

export function isWindows() {
  return navigator.userAgent.toLowerCase().includes('win');
}

export function isAndroidSDK() {
  const options = getOptionsFromEndpoint(Endpoint.Client.SendLegacy);
  const { sdk } = options;

  return includes(sdk, 'android');
}

export function isMobileUserAgent() {
  return (
    navigator &&
    /Android|webOS|iPhone|iPad|iPod|BlackBerry|BB|PlayBook|IEMobile|Windows Phone|Kindle|Silk|Opera Mini/i.test(
      navigator.userAgent.toLocaleLowerCase(),
    )
  );
}
