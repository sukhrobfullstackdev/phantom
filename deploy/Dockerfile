# Ignore tester stage. Needed to test if all files ignored properly.
FROM node:18.20.0-slim AS ignore-tester
ARG APP_ROOT="/app"
WORKDIR ${APP_ROOT}
COPY . ${APP_ROOT}
RUN ./tools/check_ignore.sh



##################
## BUILDER-ROOT ##
##################
FROM node:18.20.0-slim as builder-root
ARG APP_ROOT="/app"
WORKDIR ${APP_ROOT}

# TODO(mack#sc61376|2023-04-24): Drop the workaround when upgrading node, should not be needed anymore
# Workaround not found packages for Debian 9 (stretch) because it was moved to the archive.
RUN echo "deb http://archive.debian.org/debian stretch main" > /etc/apt/sources.list

# We have dependency on npm-gyp. Needs to install python, gcc and etc. We can
# optimize this in the future to decrease the image size.
RUN apt-get update \
  && apt-get install -y --no-install-recommends python make g++ pkg-config libusb-1.0 libudev-dev \
  && apt-get clean \
  && apt-get autoclean \
  && rm -rf /var/cache/apt
COPY .npmrc ${APP_ROOT}/.npmrc
# Make sure these two COPY statements are done before the `yarn install` to take
# advantage of Dockerâ€™s caching mechanism.
COPY package.json ${APP_ROOT}/package.json
COPY yarn.lock ${APP_ROOT}/yarn.lock



##################
## BUILDER BASE ##
##################
FROM builder-root as builder-base
ARG APP_ROOT="/app"
ARG NPM_TOKEN
ENV NPM_TOKEN=${NPM_TOKEN}
WORKDIR ${APP_ROOT}
# Install the necessary modules.
RUN yarn install \
  && yarn cache clean



#############
## BUILDER ##
#############
FROM builder-base as builder
ARG APP_ROOT="/app"
# Build Args
ARG BACKEND_URL
ENV BACKEND_URL=${BACKEND_URL}
ARG NFT_API_URL
ENV NFT_API_URL=${NFT_API_URL}
ARG GAS_API_URL
ENV GAS_API_URL=${GAS_API_URL}
ARG APP_ENV
ENV APP_ENV=${APP_ENV}
ARG AUTH_S3_PATH
ENV AUTH_S3_PATH=${AUTH_S3_PATH}
ARG DATADOG_CLIENT_KEY
ENV DATADOG_CLIENT_KEY=${DATADOG_CLIENT_KEY}
ARG DATADOG_RUM_APP_KEY
ENV DATADOG_RUM_APP_KEY=${DATADOG_RUM_APP_KEY}
ARG DATADOG_API_KEY
ENV DATADOG_API_KEY=${DATADOG_API_KEY}
ARG DATADOG_RUM_CLIENT_KEY
ENV DATADOG_RUM_CLIENT_KEY=${DATADOG_RUM_CLIENT_KEY}
ARG HIGHTOUCH_API_KEY
ENV HIGHTOUCH_API_KEY=${HIGHTOUCH_API_KEY}
ARG HIGHTOUCH_API_HOST
ENV HIGHTOUCH_API_HOST=${HIGHTOUCH_API_HOST}
ARG IS_MAGIC
ENV IS_MAGIC=${IS_MAGIC}
ARG GENERATE_SOURCEMAP
ENV GENERATE_SOURCEMAP=${GENERATE_SOURCEMAP}
ARG DEPLOY_ENV
ENV DEPLOY_ENV=${DEPLOY_ENV}
ARG ASSETS_BASE_URL
ENV ASSETS_BASE_URL=${ASSETS_BASE_URL}
ARG INTERNAL_BACK_URL
ENV INTERNAL_BACK_URL=${INTERNAL_BACK_URL}
ARG ENCRYPTED_COOKIE_KEY
ENV ENCRYPTED_COOKIE_KEY=${ENCRYPTED_COOKIE_KEY}
ARG SIGNED_COOKIE_KEY
ENV SIGNED_COOKIE_KEY=${SIGNED_COOKIE_KEY}
ARG GET_CREDENTIALS_PROXY_URL
ENV GET_CREDENTIALS_PROXY_URL=${GET_CREDENTIALS_PROXY_URL}
ARG MC_GOOGLE_OAUTH_CLIENT_ID
ENV MC_GOOGLE_OAUTH_CLIENT_ID=${MC_GOOGLE_OAUTH_CLIENT_ID}
ARG MC_FIAT_ON_RAMP_ONRAMPER_API_KEY_WALLET_HUB
ENV MC_FIAT_ON_RAMP_ONRAMPER_API_KEY_WALLET_HUB=${MC_FIAT_ON_RAMP_ONRAMPER_API_KEY_WALLET_HUB}
ARG MC_FIAT_ON_RAMP_ONRAMPER_API_KEY_DAPPS
ENV MC_FIAT_ON_RAMP_ONRAMPER_API_KEY_DAPPS=${MC_FIAT_ON_RAMP_ONRAMPER_API_KEY_DAPPS}
ARG LAUNCH_DARKLY_CLIENT_ID
ENV LAUNCH_DARKLY_CLIENT_ID=${LAUNCH_DARKLY_CLIENT_ID}
ARG ALCHEMY_ETHEREUM_API_KEY
ENV ALCHEMY_ETHEREUM_API_KEY=${ALCHEMY_ETHEREUM_API_KEY}
ARG ALCHEMY_GOERLI_API_KEY
ENV ALCHEMY_GOERLI_API_KEY=${ALCHEMY_GOERLI_API_KEY}
ARG ALCHEMY_SEPOLIA_API_KEY
ENV ALCHEMY_SEPOLIA_API_KEY=${ALCHEMY_SEPOLIA_API_KEY}
ARG ALCHEMY_POLYGON_API_KEY
ENV ALCHEMY_POLYGON_API_KEY=${ALCHEMY_POLYGON_API_KEY}
ARG ALCHEMY_MUMBAI_API_KEY
ENV ALCHEMY_MUMBAI_API_KEY=${ALCHEMY_MUMBAI_API_KEY}
ARG ALCHEMY_OPTIMISM_API_KEY
ENV ALCHEMY_OPTIMISM_API_KEY=${ALCHEMY_OPTIMISM_API_KEY}
ARG ALCHEMY_OPTIMISM_GOERLI_API_KEY
ENV ALCHEMY_OPTIMISM_GOERLI_API_KEY=${ALCHEMY_OPTIMISM_GOERLI_API_KEY}
ARG ALCHEMY_ARBITRUM_ONE_API_KEY
ENV ALCHEMY_ARBITRUM_ONE_API_KEY=${ALCHEMY_ARBITRUM_ONE_API_KEY}
ARG ALCHEMY_ARBITRUM_SEPOLIA_API_KEY
ENV ALCHEMY_ARBITRUM_SEPOLIA_API_KEY=${ALCHEMY_ARBITRUM_SEPOLIA_API_KEY}
ARG ALCHEMY_BASE_API_KEY
ENV ALCHEMY_BASE_API_KEY=${ALCHEMY_BASE_API_KEY}
ARG ALCHEMY_BASE_SEPOLIA_API_KEY
ENV ALCHEMY_BASE_SEPOLIA_API_KEY=${ALCHEMY_BASE_SEPOLIA_API_KEY}
ARG SARDINE_URL_TEST
ENV SARDINE_URL_TEST=${SARDINE_URL_TEST}
ARG SARDINE_URL_PROD
ENV SARDINE_URL_PROD=${SARDINE_URL_PROD}
ARG MAGIC_WALLET_DAPP_API_KEY
ENV MAGIC_WALLET_DAPP_API_KEY=${MAGIC_WALLET_DAPP_API_KEY}
ARG MAGIC_WALLET_DAPP_REFERRER
ENV MAGIC_WALLET_DAPP_REFERRER=${MAGIC_WALLET_DAPP_REFERRER}


WORKDIR ${APP_ROOT}

# Copy in the necessary files for `yarn build`.
COPY scripts ${APP_ROOT}/scripts
COPY config ${APP_ROOT}/config
COPY tsconfig.json ${APP_ROOT}/tsconfig.json
COPY core ${APP_ROOT}/core
COPY features ${APP_ROOT}/features
COPY cdn-static ${APP_ROOT}/cdn-static
RUN yarn build



############
## RUNNER ##
############
FROM node:18.20.0-slim as runner
ARG APP_ROOT="/app"
# App don't start without following
# Build Args
ARG NPM_TOKEN
ENV NPM_TOKEN=${NPM_TOKEN}
ARG BACKEND_URL
ENV BACKEND_URL=${BACKEND_URL}
ARG NFT_API_URL
ENV NFT_API_URL=${NFT_API_URL}
ARG GAS_API_URL
ENV GAS_API_URL=${GAS_API_URL}
ARG APP_ENV
ENV APP_ENV=${APP_ENV}
ARG AUTH_S3_PATH
ENV AUTH_S3_PATH=${AUTH_S3_PATH}
ARG DATADOG_CLIENT_KEY
ENV DATADOG_CLIENT_KEY=${DATADOG_CLIENT_KEY}
ARG HIGHTOUCH_API_KEY
ENV HIGHTOUCH_API_KEY=${HIGHTOUCH_API_KEY}
ARG HIGHTOUCH_API_HOST
ENV HIGHTOUCH_API_HOST=${HIGHTOUCH_API_HOST}
ARG IS_MAGIC
ENV IS_MAGIC=${IS_MAGIC}
ARG GENERATE_SOURCEMAP
ENV GENERATE_SOURCEMAP=${GENERATE_SOURCEMAP}
ARG DEPLOY_ENV
ENV DEPLOY_ENV=${DEPLOY_ENV}
ARG ASSETS_BASE_URL
ENV ASSETS_BASE_URL=${ASSETS_BASE_URL}
ARG INTERNAL_BACK_URL
ENV INTERNAL_BACK_URL=${INTERNAL_BACK_URL}
ARG ENCRYPTED_COOKIE_KEY
ENV ENCRYPTED_COOKIE_KEY=${ENCRYPTED_COOKIE_KEY}
ARG SIGNED_COOKIE_KEY
ENV SIGNED_COOKIE_KEY=${SIGNED_COOKIE_KEY}
ARG GET_CREDENTIALS_PROXY_URL
ENV GET_CREDENTIALS_PROXY_URL=${GET_CREDENTIALS_PROXY_URL}
ARG MC_GOOGLE_OAUTH_CLIENT_ID
ENV MC_GOOGLE_OAUTH_CLIENT_ID=${MC_GOOGLE_OAUTH_CLIENT_ID}
ARG MC_FIAT_ON_RAMP_ONRAMPER_API_KEY_WALLET_HUB
ENV MC_FIAT_ON_RAMP_ONRAMPER_API_KEY_WALLET_HUB=${MC_FIAT_ON_RAMP_ONRAMPER_API_KEY_WALLET_HUB}
ARG MC_FIAT_ON_RAMP_ONRAMPER_API_KEY_DAPPS
ENV MC_FIAT_ON_RAMP_ONRAMPER_API_KEY_DAPPS=${MC_FIAT_ON_RAMP_ONRAMPER_API_KEY_DAPPS}
ARG LAUNCH_DARKLY_CLIENT_ID
ENV LAUNCH_DARKLY_CLIENT_ID=${LAUNCH_DARKLY_CLIENT_ID}
ARG ALCHEMY_ETHEREUM_API_KEY
ENV ALCHEMY_ETHEREUM_API_KEY=${ALCHEMY_ETHEREUM_API_KEY}
ARG ALCHEMY_GOERLI_API_KEY
ENV ALCHEMY_GOERLI_API_KEY=${ALCHEMY_GOERLI_API_KEY}
ARG ALCHEMY_SEPOLIA_API_KEY
ENV ALCHEMY_SEPOLIA_API_KEY=${ALCHEMY_SEPOLIA_API_KEY}
ARG ALCHEMY_POLYGON_API_KEY
ENV ALCHEMY_POLYGON_API_KEY=${ALCHEMY_POLYGON_API_KEY}
ARG ALCHEMY_MUMBAI_API_KEY
ENV ALCHEMY_MUMBAI_API_KEY=${ALCHEMY_MUMBAI_API_KEY}
ARG ALCHEMY_OPTIMISM_API_KEY
ENV ALCHEMY_OPTIMISM_API_KEY=${ALCHEMY_OPTIMISM_API_KEY}
ARG ALCHEMY_OPTIMISM_GOERLI_API_KEY
ENV ALCHEMY_OPTIMISM_GOERLI_API_KEY=${ALCHEMY_OPTIMISM_GOERLI_API_KEY}
ARG SARDINE_URL_TEST
ENV SARDINE_URL_TEST=${SARDINE_URL_TEST}
ARG SARDINE_URL_PROD
ENV SARDINE_URL_PROD=${SARDINE_URL_PROD}
ARG MAGIC_WALLET_DAPP_API_KEY
ENV MAGIC_WALLET_DAPP_API_KEY=${MAGIC_WALLET_DAPP_API_KEY}
ARG MAGIC_WALLET_DAPP_REFERRER
ENV MAGIC_WALLET_DAPP_REFERRER=${MAGIC_WALLET_DAPP_REFERRER}

WORKDIR ${APP_ROOT}
COPY --from=builder ${APP_ROOT} ${APP_ROOT}
# Workaround for serving static in preview environments
# Node don't want to serve static from the `build/static` dir
RUN cp -r build/static __local_dev__
